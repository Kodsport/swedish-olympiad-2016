#!/bin/bash
PPATH=$(realpath ..)
. ../../testdata_tools/gen.sh

# Setup testdata.yaml and do some cleanup
setup_dirs

# Choose your solution
use_solution js_100.cpp

# Compile generators
compile gen-random.py # Arguments: length seed

# Generate answers to sample cases
samplegroup
sample sample01_trivial
sample sample02_example
sample sample03_single

# Add a new testdata group
group simple 7
# Note: tc automatically adds a deterministic, pseudo-random seed argument to your generator
tc exact gen-random '' 10
tc one_off_01 gen-random '' 11
tc one_off_02 gen-random '' 11
tc one_off_03 gen-random '' 11

group cubic 11
include_group simple
tc rand100 gen-random '' 100
tc sparse100 gen-random UNVA 100

group quadratic 12
include_group cubic
tc rand3000 gen-random '' 3000
tc sparse3000 gen-random UNVA 3000
tc sparse3000-2 gen-random UA 2999

group nlogn 20
include_group quadratic
tc rand200000 gen-random '' 200000
tc sparse200000 gen-random UNVA 200000
tc sparse200000-2 gen-random UA 199997

# Cleanup programs
cleanup_programs

# Generate grader
generate_grader
